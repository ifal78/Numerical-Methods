% VALUE FUNCTION ITERATION

% Define Global Parameters
global beta nu theta delta h

beta  = 0.988;
theta = 0.679;
delta = 0.13;
h     = 1;

% Compute the Steady State

k_ss  = 1/[[((1/beta)-1+delta)*(1/(1-theta))]^(1/theta)];
y_ss  = ((k_ss)^(1-theta))*((h)^(theta));
i_ss  = delta*k_ss;
c_ss  = y_ss - i_ss;

% 1.1) VFI by brute force

% STEP 1. Discretize k
global p
k_min = 0.01;
k_max = 3.51;
p     = 200;
eta   = ((k_max - k_min)/(p-1));

for j = 1:p
    k_grid(j,:)= k_min + (j-1)*((k_max - k_min)/(p-1));
end

% STEP 2. Guess an initial solution for V

V     = zeros(p,1);
tol   = 0.000001;
V1    = zeros(p,1);
error = 1000;
% STEP 3. Compute the M matrix
% STEP 4. Replace non-feasible ks
clear i j
tic
while error > tol
    V0=V1;
for i=1:p
    for j=1:p
        if k_grid(j) < ((k_grid(i)^(1-theta)) + (1-delta)*k_grid(i)) 
            M(i,j) = log( (k_grid(i)^(1-theta)) + (1-delta)*k_grid(i) - k_grid(j) );
        else 
            M(i,j) = -99999999;
        end
    end 
end

% STEP 5. Compute the X matrix
clear i j
for i=1:p
    for j=1:p
       X(i,j) = M(i,j)+beta*V(i); 
     end 
end

V       =  max(X,[],2);
error   =  V - V0;
error   =  norm(error);
V1      =  V;
end
time1   =  toc;
